/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is web services module code.
 *
 * The Initial Developer of the Original Code is R. Kent James <rkent@mesquilla.com>
 *
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

 
#include "nsISupports.idl"

[scriptable, uuid(940D2C37-4316-4f6f-AE06-CE9CC3BD0FAA)]
interface msqIStringArray : nsISupports
{
  /**
   * Array of AString objects
   */

  /// set the value of the array at index
  void assignAt(in unsigned long index, in AString value);

  /// delete the string at index
  void removeAt(in unsigned long index);

  /// find the index of a string in the array, noIndex if not found
  long indexOf(in AString value);

  /// index indicating not found, actually is -1
  const long noIndex = -1;

  /// count of elements in the array
  readonly attribute unsigned long length;

  /// does the array have any elements?
  readonly attribute boolean isEmpty;

  /// append a string to the array
  void append(in AString value);

  /// copy that string at index into the string target
  AString getAt(in unsigned long index);

  /// make the array empty
  void clear();
};

