// tests the Binary module for conversion to/from base64

Cu.import("resource://exquilla/ewsUtils.jsm");
let log = Utils.ewsLog;
// not sure why this spews uncaught errors
Utils.importLocally(this);
XPCOMUtils.defineLazyModuleGetter(this, "Base64", "resource://exquilla/Base64.jsm");
//XPCOMUtils.defineLazyModuleGetter(this, "TextEncoder", "resource://exquilla/TextEncoder.jsm");

var tests = [
  testMimeContent,
  testRandom,
  testBinary,
];

function* testMimeContent() {
  //let contentDecodedArray = Base64.toByteArray(mimeContent);
  let contentDecoded = atobUTF(mimeContent);
  log.info("contentDecoded is " + contentDecoded);
  Assert.ok(contentDecoded.indexOf("english 한국어 korean") != -1);
}

let test_cases = [
  ["S2V2aW4gdmFuIFpvbm5ldmVsZA==", "Kevin van Zonneveld"],
  ["4omh", "≡"],  // I don't know if this is correct
  [ "VHdvLWxpbmUgQVNDSUkNClByZXRlbmRpbmcgdG8gYmUgYmluYXJ5Lg==",
    "Two-line ASCII\r\nPretending to be binary."],
]

var mimeContent = ``;

function* testRandom() {
  let s = generateRandomString();
  dl("random is <" + s + ">");
}

function* testBinary() {

  // *     example 1: base64_encode('Kevin van Zonneveld');
  // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
  for (let test_case of test_cases) {
    let b64_case = test_case[0];
    let text_case = test_case[1];
    // First, encode the string as utf8
    let utf8 = (new TextEncoder()).encode(text_case);
    // Next, encode that string
    let b64_calc = Base64.fromByteArray(utf8);
    dl("b64_calc is " + b64_calc);
    // and reverse
    let utf8_2 = Base64.toByteArray(b64_calc);
    let text_calc = (new TextDecoder()).decode(utf8_2);
    Assert.equal(text_case, text_calc);
    Assert.equal(b64_case, b64_calc);

    // now test the Utils version
    Assert.equal(btoaUTF(text_case), b64_case);
    Assert.equal(atobUTF(b64_case), text_case);
  }
}

function run_test()
{
  tests.forEach(x => add_task(x));
  run_next_test();
}
